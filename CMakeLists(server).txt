cmake_minimum_required(VERSION 3.16)
project(chronos_matmul LANGUAGES CXX)

# Add an option to force a build with no SIMD instructions (AVX, NEON, etc.)
option(FORCE_SCALAR "Force compilation without any SIMD intrinsics" OFF)

# --- Python & pybind11 ---
find_package(Python3 COMPONENTS Interpreter Development.Module REQUIRED)
find_package(pybind11 REQUIRED)

# --- OpenMP & Vulkan ---
find_package(OpenMP)
find_package(Vulkan)
if (Vulkan_FOUND)
    message(STATUS "Vulkan found. Enabling GPU acceleration support.")
    find_program(GLSLC_COMPILER glslc)
    if (NOT GLSLC_COMPILER)
        message(WARNING "glslc not found. Vulkan support disabled. Please install the Vulkan SDK.")
        set(Vulkan_FOUND FALSE)
    endif()
endif()

# --- MSVC Specific Fix for /RTC1 flag conflict ---
if(MSVC)
    string(REPLACE "/RTC1" "/O2" CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}")
    string(REPLACE "/Od" "/O2" CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}" CACHE STRING "Flags used by the C++ compiler during release builds." FORCE)
endif()

# --- Compile Shaders if Vulkan is available ---
if(Vulkan_FOUND)
    set(CHRONOS_USE_VULKAN TRUE)
    file(GLOB SHADER_SOURCES "${CMAKE_SOURCE_DIR}/cpp/shaders/*.comp")

    foreach(SHADER_SOURCE ${SHADER_SOURCES})
        get_filename_component(SHADER_NAME ${SHADER_SOURCE} NAME_WE)
        set(SHADER_SPIRV "${CMAKE_CURRENT_BINARY_DIR}/shaders/${SHADER_NAME}.spv")

        add_custom_command(
            OUTPUT ${SHADER_SPIRV}
            COMMAND ${GLSLC_COMPILER} -O -o ${SHADER_SPIRV} ${SHADER_SOURCE}
            DEPENDS ${SHADER_SOURCE}
            COMMENT "Compiling ${SHADER_NAME}.comp to SPIR-V"
        )
        list(APPEND SHADER_SPIRV_FILES ${SHADER_SPIRV})
    endforeach()

    add_custom_target(Shaders ALL DEPENDS ${SHADER_SPIRV_FILES})
endif()

# --- Module Definition ---
pybind11_add_module(chronos_matmul
    cpp/chronos_matmul.cpp
    cpp/bindings.cpp
)

if(Vulkan_FOUND)
    target_sources(chronos_matmul PRIVATE cpp/chronos_vulkan.cpp)
    target_link_libraries(chronos_matmul PRIVATE Vulkan::Vulkan)
    target_compile_definitions(chronos_matmul PRIVATE CHRONOS_USE_VULKAN)
    target_include_directories(chronos_matmul PRIVATE ${CMAKE_CURRENT_BINARY_DIR})
    add_dependencies(chronos_matmul Shaders)

    add_custom_command(
        TARGET chronos_matmul POST_BUILD
        COMMAND ${CMAKE_COMMAND} -E copy_directory
                "${CMAKE_CURRENT_BINARY_DIR}/shaders"
                "${CMAKE_LIBRARY_OUTPUT_DIRECTORY}/shaders"
        COMMENT "Copying compiled shaders to output directory"
    )
endif()

target_compile_features(chronos_matmul PRIVATE cxx_std_17)
include(CheckCXXCompilerFlag)
# Only attempt to add SIMD-specific compiler flags if we are NOT forcing scalar mode.
if(NOT FORCE_SCALAR)
    if (MSVC)
        target_compile_options(chronos_matmul PRIVATE /W3 /EHsc)
        check_cxx_compiler_flag("/arch:AVX512" COMPILER_SUPPORTS_AVX512)
        if(COMPILER_SUPPORTS_AVX512)
            message(STATUS "AVX-512 support detected. Compiling with AVX-512 flags for MSVC.")
            target_compile_options(chronos_matmul PRIVATE /arch:AVX512)
        else()
            check_cxx_compiler_flag("/arch:AVX2" COMPILER_SUPPORTS_AVX2)
            if (COMPILER_SUPPORTS_AVX2)
                message(STATUS "AVX2 support detected. Compiling with AVX2 flags for MSVC.")
                target_compile_options(chronos_matmul PRIVATE /arch:AVX2)
            endif()
        endif()
    else()
        target_compile_options(chronos_matmul PRIVATE -O3 -fPIC -std=c++17 -Wno-unused-variable)
        if (CMAKE_SYSTEM_PROCESSOR MATCHES "aarch64|arm64|armv8-a")
            message(STATUS "ARM aarch64 architecture detected. Enabling NEON.")
            target_compile_options(chronos_matmul PRIVATE -march=native)
        else()
            check_cxx_compiler_flag("-mavx512f" COMPILER_SUPPORTS_AVX512F)
            check_cxx_compiler_flag("-mavx512bw" COMPILER_SUPPORTS_AVX512BW)
            ### MODIFICATION START ###
            check_cxx_compiler_flag("-mavx512dq" COMPILER_SUPPORTS_AVX512DQ)
            if (COMPILER_SUPPORTS_AVX512F AND COMPILER_SUPPORTS_AVX512BW AND COMPILER_SUPPORTS_AVX512DQ)
                message(STATUS "AVX-512 F/BW/DQ support detected. Compiling with AVX-512 flags.")
                target_compile_options(chronos_matmul PRIVATE -mavx512f -mavx512bw -mavx512dq -mfma)
            ### MODIFICATION END ###
            else()
                check_cxx_compiler_flag("-mavx2" COMPILER_SUPPORTS_AVX2)
                if (COMPILER_SUPPORTS_AVX2)
                    message(STATUS "AVX2 support detected. Compiling with AVX2 flags.")
                    target_compile_options(chronos_matmul PRIVATE -mavx2 -mfma)
                endif()
            endif()
        endif()
    endif()
endif() # End of the "if(NOT FORCE_SCALAR)" block

# Add OpenMP regardless of SIMD
if (OpenMP_CXX_FOUND)
    message(STATUS "OpenMP support detected. Enabling parallelization.")
    target_compile_options(chronos_matmul PRIVATE ${OpenMP_CXX_FLAGS})
    target_link_libraries(chronos_matmul PRIVATE ${OpenMP_CXX_LIBRARIES})
endif()


# --- Automatically move the compiled library to the project root ---
add_custom_command(
    TARGET chronos_matmul POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E copy_if_different
        "$<TARGET_FILE:chronos_matmul>"
        "${PROJECT_ROOT_DIR}/$<TARGET_FILE_NAME:chronos_matmul>"
    COMMENT "Copying kernel to project root..."
)
