#version 450
layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(binding = 0, std430) readonly buffer MatrixA { float A[]; };
layout(binding = 1, std430) readonly buffer QuantizedB { uint B[]; };
layout(binding = 2, std430) writeonly buffer MatrixY { float Y[]; };

layout(push_constant) uniform PushConstants {
    int K;
    int M;
    int N;
};

void main() {
    uint n = gl_GlobalInvocationID.x;
    uint m = gl_GlobalInvocationID.y;

    if (n >= N || m >= M) {
        return;
    }

    float sum = 0.0;
    uint block_size_k = 32;                               // <<< FIXED
    uint sizeof_block_bytes = 20;                         // <<< FIXED
    uint num_blocks_per_row = uint(K) / block_size_k;     // <<< FIXED
    uint b_row_offset_uints = m * num_blocks_per_row * sizeof_block_bytes / 4; // <<< FIXED
    
    for (uint i = 0; i < num_blocks_per_row; ++i) { // <<< FIXED
        uint block_offset_uints = b_row_offset_uints + i * sizeof_block_bytes / 4; // <<< FIXED
        float d = uintBitsToFloat(B[block_offset_uints]);

        for (uint j = 0; j < 4; ++j) { // <<< FIXED
            uint packed_qs = B[block_offset_uints + 1 + j];
            for (uint l = 0; l < 4; ++l) { // <<< FIXED
                int q_packed = int((packed_qs >> (l * 8)) & 0xFF);
                int v1 = q_packed & 0x0F;
                int v2 = q_packed >> 4;
                int q1 = (v1 > 7) ? v1 - 16 : v1;
                int q2 = (v2 > 7) ? v2 - 16 : v2;

                uint a_idx = n * uint(K) + i * 32 + j * 8 + l * 2; // <<< FIXED
                sum += (A[a_idx + 0] * float(q1) * d);
                sum += (A[a_idx + 1] * float(q2) * d);
            }
        }
    }
    Y[n * uint(M) + m] = sum; // <<< FIXED
}
